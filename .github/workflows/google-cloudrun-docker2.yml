# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.

# To configure this workflow:

# 1. Enable the following Google Cloud APIs:

#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: 'regal-sun-445214-a7' # Your Google Cloud project ID
  REGION: 'us-central1' # Your region
  SERVICE: 'githubaction' # Your Cloud Run service name
  WORKLOAD_IDENTITY_PROVIDER: 'projects/938459732232/locations/global/workloadIdentityPools/wif-ga-pool/providers/github'
                              
  ARTIFACT_REGISTRY: 'gitactions-repository' # Your Artifact Registry repository name
  service_account: 'githubaction@regal-sun-445214-a7.iam.gserviceaccount.com'

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      id-token: 'write'
      contents: 'read'

    steps:
      # Step 1: Checkout the code
      - name: 'Checkout'
        uses: 'actions/checkout@v4'

      # Step 2: Authenticate with Google Cloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: 'githubaction@regal-sun-445214-a7.iam.gserviceaccount.com'

      # Step 3: Debug Authentication
      - name: Debug Authentication
        run: |
          echo "Listing authenticated accounts..."
          gcloud auth list
          echo "Describing the repository..."
          gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY }} --location=${{ env.REGION }}

      # Step 4: Docker Authentication for Artifact Registry
      # - name: 'Docker Auth'
      #   uses: 'docker/login-action@v3'
      #   with:
      #     username: 'oauth2accesstoken'
      #     password: '${{ steps.auth.outputs.auth_token }}'
      #     registry: '${{ env.REGION }}-docker.pkg.dev'
      - name: 'Configure Docker Auth with Artifact Registry'
        run: |
          echo "Configuring Docker Auth with Artifact Registry..."
          gcloud auth configure-docker us-central1-docker.pkg.dev

      
      # Step 5: Build and Push Docker Image
      - name: 'Build and Push Container'
        run: |-
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE }}:${{ github.sha }}"
          echo "Building Docker image..."
          docker build --tag "${DOCKER_TAG}" ./ecommercebot
          echo "Pushing Docker image to Artifact Registry..."
          docker push "${DOCKER_TAG}"

      # Step 5: List Environment Variables Before Deployment
      - name: List Environment Variables Before Deployment
        run: |
          echo "Listing environment variables to be passed to Cloud Run..."
          echo "GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}"
          echo "LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}"
          echo "LANGCHAIN_ENDPOINT: ${{ secrets.LANGCHAIN_ENDPOINT }}"
          echo "LANGCHAIN_PROJECT: ${{ secrets.LANGCHAIN_PROJECT }}"
          echo "LANGCHAIN_TRACING_V2: ${{ secrets.LANGCHAIN_TRACING_V2 }}"
          echo "PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}"
          echo "PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}"
          
      # Step 6: Deploy to Cloud Run
      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE }}:${{ github.sha }}'
          env_vars: |
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 }}
            LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT }}
            LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}
            LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}
            PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
            PINECONE_ENVIRONMENT=${{ secrets.PINECONE_ENVIRONMENT }}

          flags: '--allow-unauthenticated'
      
      # Step 7: Output Cloud Run URL
      - name: 'Show output'
        run: |
          echo "Cloud Run Service URL: ${{ steps.deploy.outputs.url }}"

